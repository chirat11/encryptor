name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive: zip
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive: tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            archive: tar.gz

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        # Install OpenSSL via vcpkg
        vcpkg install openssl:x64-windows-static-md
        echo "OPENSSL_DIR=$env:VCPKG_INSTALLATION_ROOT\installed\x64-windows-static-md" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "OPENSSL_STATIC=1" | Out-File -FilePath $env:GITHUB_ENV -Append

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config build-essential

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Install build tools needed for vendored OpenSSL
        xcode-select --install 2>/dev/null || true

    - name: Build (Windows)
      if: matrix.os == 'windows-latest'
      run: cargo build --release --target ${{ matrix.target }}

    - name: Build (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: cargo build --release --target ${{ matrix.target }} --features vendored-openssl

    - name: Create package (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        $version = "${{ github.ref_name }}".Substring(1)  # Remove 'v' prefix
        New-Item -ItemType Directory -Force -Path "dist/windows"
        Copy-Item "target/${{ matrix.target }}/release/encryptor.exe" "dist/windows/"
        Copy-Item "run-encryptor.bat" "dist/windows/"
        
        Compress-Archive -Path "dist/windows/*" -DestinationPath "encryptor-windows-$version.zip"

    - name: Create package (Unix)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        version="${{ github.ref_name }}"
        version="${version#v}"  # Remove 'v' prefix
        
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          platform="linux"
        else
          platform="macos"
        fi
        
        mkdir -p "dist/$platform"
        cp "target/${{ matrix.target }}/release/encryptor" "dist/$platform/"
        cp "run-encryptor.sh" "dist/$platform/"
        chmod +x "dist/$platform/encryptor"
        chmod +x "dist/$platform/run-encryptor.sh"
        
        tar -czf "encryptor-$platform-$version.tar.gz" -C "dist/$platform" .

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: encryptor-${{ matrix.target }}
        path: |
          *.zip
          *.tar.gz

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          encryptor-*/encryptor-*.zip
          encryptor-*/encryptor-*.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 